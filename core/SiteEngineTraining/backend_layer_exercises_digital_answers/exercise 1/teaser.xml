<?xml version="1.0" encoding="UTF-8"?>
<template-definition version="1.0" xmlns="http://www.polopoly.com/polopoly/cm/app/xml">
  <input-template name="example.TeaserElement" label="cm.template.example.TeaserElement">
    <policy>example.layout.element.TeaserPolicy</policy>
    <editor>com.polopoly.cm.app.widget.OTopPolicyWidget</editor>
    <viewer>com.polopoly.cm.app.widget.OTopPolicyWidget</viewer>
    <type>LayoutElement</type>
    <param name="ViewState_insert">false</param>
    <param name="ViewState_refresh">true</param>
    <param name="EditState_saveAndClose">true</param>
    <param name="EditState_saveAndInsert">false</param>
    <param name="EditState_saveAndFastInsert">false</param>
    <param name="EditState_saveAndView">true</param>
    <param name="EditNewState_saveAndClose">false</param>
    <param name="EditNewState_saveAndInsert">false</param>
    <param name="EditNewState_saveAndFastInsert">true</param>
    <param name="EditNewState_saveAndView">false</param>
    <param name="templateIcon">text_teaser.png</param>
    <param name="renderTemplateIconInSelect">true</param>
    <editor contextName="orchid_TOCENTRY">example.widget.OContentListEntryBasePolicyWidget</editor>
    <viewer contextName="orchid_TOCENTRY">example.widget.OContentListEntryBasePolicyWidget</viewer>
    <content-list name="articles" input-template="example.TeaserImageInitContentListWrapper" />
    <layout name="titleHolder" input-template="p.ColumnHolder">
      <layout name="titleColumn" input-template="p.Column">
        <field name="name" input-template="p.ContentName" label="cm.label.Title" required="false" />
      </layout>
      <layout name="titleSizeColumn" input-template="p.Column">
        <field name="titleFontSize" input-template="p.TextInput" label="cm.template.example.TeaserElement.TitleFontSize">
          <help>cm.template.example.TeaserElement.TitleFontSize.help</help>
          <policy>com.polopoly.cm.app.policy.NumberInputPolicy</policy>
          <param name="type">int</param>
          <param name="size">3</param>
        </field>
      </layout>
      <layout name="titleLetterSpacingColumn" input-template="p.Column">
        <field name="titleLetterSpacing" input-template="p.TextInput" label="cm.template.example.TeaserElement.TitleLetterSpacing">
          <help>cm.template.example.TeaserElement.TitleLetterSpacing.help</help>
          <policy>com.polopoly.cm.app.policy.NumberInputPolicy</policy>
          <param name="type">int</param>
          <param name="size">2</param>
        </field>
      </layout>
    </layout>
    <field name="teaser" input-template="p.TextArea" label="cm.label.Text">
      <param name="rows">3</param>
      <param name="cols">50</param>
    </field>
    <field name="articles" input-template="p.ContentListEntryContainer" label="cm.template.example.TeaserElement.article">
      <param name="contentListName">articles</param>
      <param name="showActionButtonsInViewMode">false</param>
    </field>
    <field name="image" input-template="p.ImageEditor" label="cm.general.Image">
      <param name="supportedDerivativeType_value_0">landscape</param>
      <param name="supportedDerivativeType_label_0">cm.template.example.TeaserElement.ImagePosition.top</param>
      <param name="supportedDerivativeType_value_1">box</param>
      <param name="supportedDerivativeType_label_1">cm.template.example.TeaserElement.ImagePosition.inline</param>
      <param name="width">490</param>
      <param name="acceptResourceTypes">image</param>
    </field>
    <field name="breakingNews" input-template="p.Checkbox" label="cm.template.example.TeaserElement.BreakingNews">
      <param name="checked">false</param>
    </field>
    <field name="author_info" input-template="training.TextArea" label="my textarea" />
    
    <output-templates mode="www">
      <id>example.TeaserElement.ot</id>
    </output-templates>
    <output-templates mode="mobile">
      <id>example.TeaserElement.ot</id>
    </output-templates>
  </input-template>
  <!-- Teasers render differently depending on not just the
       standard parameters, but also depending on the width of the
       column they are in, which is used to determine which image
       to display.  This means we need an extra component in the
       cache key, beyond just content ID, mode and view.  We could
       just use the raw colwidth attribute which is set by the
       column splitter for this, but we only use that to figure
       out which image width to use.  So we let the controller
       store the width of the image used in the model, and then
       use that, rather than the column width, to generate the
       cache key.  This increases the hit rate when there are many
       different column widths, without sacrificing
       correctness. -->
  <output-template name="example.TeaserElement.ot" input-template="p.siteengine.ElementOutputTemplate">
    <content-xml>
      <component group="output/modelKeyMode" name="selected">custom</component>
      <component group="output/modelPaths" name="value">m.local.content.contentId;m.local.articleId;m.local.referredImageId;m.request.view;m.request.mode;m.local.imageDerivativeKey</component>      
      <contentref group="output/controller" name="selected">
        <contentid>
          <externalid>p.siteengine.JavaClassRenderController</externalid>
        </contentid>
      </contentref> 
      <component group="output/controller/selected/renderControllerClass" name="value">example.layout.element.teaser.RenderControllerTeaserElement</component>
      <component group="output/interactivePreviewEditableObjectName" name="value">Example.EditableTeaser</component>
      <component group="output/renderer/selected/default" name="value">
        <![CDATA[
## Fetch article, image and image path that were calculated in the controller
#set($articleId = $m.local.content.articleId)
#set($article = $m.local.content.article)

## Do not render if "broken" article ref.
#if(!$articleId || $article) 
  
  #set($image = $m.local.content.get("_data"))
  #set($derivative = $m.local.imageDerivativeKey)
  #set ($title = $content.name)
    
  ## Get resource strings
  #set($rs = $m.context.site.bean.resources.strings)
  
  ## Get teaser text from element or article
  #set ($teaser = $content.teaser.value)
  #if(!$teaser && $article)
    #set($teaser = $article.lead)
  #end


  #if($content.titleFontSize.value)
    #set($fontSize = "font-size:" + $content.titleFontSize.value + "px;")
  #end
  #if($content.titleLetterSpacing.value)
    #set($letterSpacing = "letter-spacing:" + $content.titleLetterSpacing.value + "px;")
  #end
  #set($style = "")

  #if($fontSize || $letterSpacing)
    #set($style = " style='")
    #if($fontSize)
      #set($style = $style + $fontSize)
    #end
    #if($letterSpacing)
      #set($style = $style + $letterSpacing)
    #end
    #set($style = $style + "'")
  #end

    ## Render teaser
    
    <div class="element teaser#if($m.request.preview.inPreviewMode) editable#end">
      #if($m.request.preview.inPreviewMode && $article)
        #set ($contentIdString = ${article.contentId.contentId.contentIdString})
        #set($statisticsId = "statisticsChart${m.local.controllerContext.renderId}")
        <div class="statisticsChart" id="$statisticsId" polopoly:elementWidth="${m.stack.getAttribute("colwidth")}" polopoly:contentId="${contentIdString}"></div>
      #end
    
      #if($content.breakingNews.value && $content.breakingNews.value == 'true')
        <div class="breakingNewsHeader">$rs.breakingnews.title</div>
      #end
      
      ## Create link to article
      #if($article)
        #set($path = $article.parentIds)
        ## If parent ids of article is invalid, use path to current page
        #if(!$tool_path.isValidPath($path))
          #set($path = $tool_path.concat($m.context.page.contentPath.fullPath, $article.contentId))
        #end
      #end
    
      ## Render image
      #if($image && $derivative)
        #if($content.image.selectedDerivativeType == "landscape")
          #if($path)
            <a href="#link({"path": $path, "":""})">
          #end
          #imageresource({"contentId": $image.contentId,
                          "derivative": $derivative,
                          "":""})
          #if($path)
            </a>
          #end
        #end
      #end
  
      #if($title)
        #if($path)
          <h1$style><a href="#link({"path": $path, "":""})">$title</a></h1>
        #else
          <h1$style>$title</h1>
        #end
      #end
  
    	<div>
      <p>
      #if($image && $derivative)
        #if($content.image.selectedDerivativeType == "box")
          #if($path)
            <a href="#link({"path": $path, "":""})">
          #end
          #imageresource({"contentId": $image.contentId,
                          "derivative": $derivative,
                          "class": "left",
                          "":""})
          #if($path)
            </a>
          #end
        #end
      #end
    
      #if($teaser)
        $teaser
      #end
      </p>
  	</div>
      
      #if($content.breakingNews.value && $content.breakingNews.value == 'true')
        <div class="breakingNewsFooter"></div>
      #end
  
    </div>
#end
      ]]>
      </component>
    </content-xml>
  </output-template>
</template-definition>
